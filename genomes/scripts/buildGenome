#!/bin/bash

# Computes Fixed and Variable length bins for Ginkgo
####################################################

# List of read lengths to consider
READLEN=(48 76 101 150)

# List of bin sizes (uniquely mappable bases) to consider
BINSIZE=(10000 25000 50000 100000 175000 250000 500000 1000000 2500000 5000000 10000000)
#BINSIZE=(10000)

# This is the username that will be monitored for qsub
USERNAME=mschatz

# Path to rest of scripts
SCRIPTS=/seq/schatz/mschatz/ginkgo/genomes/scripts

# Time out for SGE
export SGE_JSV_TIMEOUT=120

if [ $# != 1 ]
then
  echo "buildGenome ASSEMBLY_PREFIX"
  exit
fi

ASSEMBLY=$1

echo "# Indexing $ASSEMBLY for ${READLEN[*]} bp reads using bins of size ${BINSIZE[*]}"

if [ ! -f list ]
then
  echo " Step (1/8): Building Chrom List"
  ls | grep ^chr | grep ".fa" |  awk -F ".fa" '{print $1}' | sort -V | uniq > list
fi

if [ ! -f ${ASSEMBLY}.fa ]
then
  echo -e "\n Step (2/8): Preparing Genome"
  cat `ls | grep chr | sort -V | tr '\n' ' '` > ${ASSEMBLY}.fa
fi

if [ ! -f bwaBUILT ]
then
  echo -e "\n Step (3/8): Building Index Files"
  /opt/uge/bin/lx-amd64/qsub -cwd -l m_mem_free=8G -v ASSEMBLY=$ASSEMBLY $SCRIPTS/indexBWA
  /opt/uge/bin/lx-amd64/qsub -cwd -l m_mem_free=8G -v ASSEMBLY=$ASSEMBLY $SCRIPTS/indexBOWTIE
fi

for len in ${READLEN[*]}; do
  if [ ! -f frag_${len}_done ]
  then
    echo -e "\n Step (4/8): Simulating $len bp Reads"
    while read line; do 
      /opt/uge/bin/lx-amd64/qsub -cwd -l m_mem_free=3G -v IN=$line -v LENGTH=$len $SCRIPTS/processGenome
    done < list
    touch frag_${len}_done
  fi
done

if [ ! -f lengths ]
then
  echo -e "\n Step (5/8): Generating Essential Chromosome Files"
  echo -e "  [Computing chromomsome lengths]"
  while read CHROM
    do echo $CHROM $((`grep -v ">" ${CHROM}.fa | wc -c`-`wc -l < ${CHROM}.fa`+1))
  done < list > lengths
fi

if [ ! -r centromeres ]
then
  echo "  [Computing centromere positions]"
  for i in `cat list`; do 
    $SCRIPTS/findCentromeres ${i}.fa out${i}
    if [ `wc -l < out${i}` -eq 0 ]; then
      echo -e "${i}\t0\t0"
    else
      awk '{print $2-$1"\t"$1"\t"$2}' out${i} | sort -rg | head -1 | awk -v chr=$i '{print chr"\t"$2"\t"$3}'
    fi
  done > centromeres
  rm -f out*
fi

for size in ${BINSIZE[*]}; do 
  if [ ! -f fixed_${size} ]
  then
    echo -e "\nStep (6/8): Generating fixed-length interval files for ${size} bp bins"
    $SCRIPTS/fixed lengths fixed_${size} $size
    $SCRIPTS/bounds fixed_${size} bounds_fixed_${size}
    $SCRIPTS/GC fixed_${size} GC_fixed_${size} lengths

    if [ -f genes ]
    then
      $SCRIPTS/match_genes_to_bins fixed_${size} genes genes_fixed_${size}
    fi
  fi
done

# Check to ensure both indexes have been build and reads have been sampled before proceeding
while [ ! -f "bwaBUILT" ] || [ ! -f "bowtieBUILT" ] || [ `qstat | grep $USERNAME | grep process | wc -l` -gt 0 ] ; do
  sleep 30
done


if [ ! -f bwa_done ] || [ ! -f bowtie_done ]
then
  ## Create a file of binsizes to compute
  rm -f binsizes
  for l in ${BINSIZE[*]}; do
    echo $l >> binsizes
  done

  echo -e "\n Step (7/8): Mapping Simulated Reads To Reference and Bin"
  while read line; do
    for len in ${READLEN[*]}; do
      /opt/uge/bin/lx-amd64/qsub -cwd -l m_mem_free=2G -pe threads 2 -v ASSEMBLY=$ASSEMBLY -v IN=$line -v LENGTH=$len $SCRIPTS/mapBOWTIE
      /opt/uge/bin/lx-amd64/qsub -cwd -l m_mem_free=2G -l tmp_free=100G -pe threads 2 -v ASSEMBLY=$ASSEMBLY -v IN=$line -v LENGTH=$len $SCRIPTS/mapBWA
    done
  done < list

  echo -e "\nFinished Launching Jobs"
fi



# Check to ensure reads have been mapped and tested for uniqueness
while [ ! -f bowtie_done ] || [ ! -f bwa_done ] || [ `qstat | grep $USERNAME | grep binB | wc -l` -gt 0 ] ; do
  sleep 30
done



## Now finish up the binning

for SIZE in ${BINSIZE[*]}; do
  for LENGTH in ${READLEN[*]}; do
    for TYPE in "bwa" "bowtie"; do
      if [ ! -f bounds_variable_${SIZE}_${LENGTH}_${TYPE} ]
      then
        echo -e "\n Step (8/8): Creating variable length ${SIZE} bins with ${LENGTH} bp reads for $TYPE"

        #Concatenate chromsome intervals
        echo -e "CHR\tEND" > variable_${SIZE}_${LENGTH}_${TYPE}
        cat `ls | grep results_${SIZE}_${LENGTH}_${TYPE} | sort -V` >> variable_${SIZE}_${LENGTH}_${TYPE}
        
        #Generate interval boundaries
        $SCRIPTS/bounds variable_${SIZE}_${LENGTH}_${TYPE} bounds_variable_${SIZE}_${LENGTH}_${TYPE}
        
        #Calculate GC content in intervals
        $SCRIPTS/GC variable_${SIZE}_${LENGTH}_${TYPE} GC_variable_${SIZE}_${LENGTH}_${TYPE} lengths

        if [ -f genes ]
        then
          #Generate gene files
          $SCRIPTS/match_genes_to_bins variable_${SIZE}_${LENGTH}_${TYPE} genes genes_variable_${SIZE}_${LENGTH}_${TYPE}
        fi
      fi
    done
  done
done

echo -e "\nAll done. You can now run clean.sh"
